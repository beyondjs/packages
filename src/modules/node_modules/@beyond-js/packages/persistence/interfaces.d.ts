/************
Processor: ts
************/

// db/collection.ts
declare namespace ns_0 {
  export interface ICollection<IItemData> {
    get(params: {
      id: string;
    }): Promise<IItemData | void>;
    set(params: {
      id: string;
      data: IItemData;
    }): Promise<void>;
    delete(params: {
      id: string;
    }): Promise<void>;
  }
}


// entities/accounts.ts
declare namespace ns_1 {
  export interface IAccountData {
    id: string;
    organization: {
      name: string;
    };
    plan: {
      type: 'free' | 'pro' | 'enterprise';
    };
    status: 'active' | 'suspended';
    timestamps: {
      created: number;
      updated?: number;
    };
  }
}


// entities/packages.ts
declare namespace ns_2 {
  import ICollection = ns_0.ICollection;
  export type PackageSource = 'npm' | 'github' | 'github-pkg' | 'gitlab' | 'artifactory' | 'url';
  export interface IPackageData {
    key: string;
    source: PackageSource;
    name: string;
    version?: string;
    owner?: string;
    repo?: string;
    ref?: string;
    domain?: string;
    timestamps: {
      created: number;
      updated?: number;
    };
  }
  export type Packages = ICollection<IPackageData>;
}


// entities/projects.ts
declare namespace ns_3 {
  import ICollection = ns_0.ICollection;
  export interface ITokenData {
    source: {
      type: 'npm' | 'github' | 'gitlab' | 'artifactory';
      domain?: string;
    };
    credentials: {
      token: string;
      user?: string;
    };
    timestamps: {
      created: {
        at: number;
      };
    };
  }
  export interface IProjectData {
    id: string;
    account: {
      id: string;
      organization: {
        name: string;
      };
    };
    name: string;
    visibility: {
      private: boolean;
    };
    timestamps: {
      created: {
        at: number;
      };
      updated?: {
        at: number;
      };
      deleted?: {
        at: number;
      };
    };
    tokens: ITokenData[];
  }
  export type Projects = ICollection<IProjectData>;
}


// storage/file.ts
declare namespace ns_4 {
  /// <reference types="node" />
  /// <reference types="node" />
  export interface IFileStorage {
    stream(path: string): Promise<NodeJS.WritableStream>;
    load(path: string): Promise<Buffer>;
    exists(path: string): Promise<boolean>;
    delete(path: string): Promise<void>;
  }
}


export import ICollection = ns_0.ICollection;
export import IAccountData = ns_1.IAccountData;
export import PackageSource = ns_2.PackageSource;
export import IPackageData = ns_2.IPackageData;
export import Packages = ns_2.Packages;
export import ITokenData = ns_3.ITokenData;
export import IProjectData = ns_3.IProjectData;
export import Projects = ns_3.Projects;
export import IFileStorage = ns_4.IFileStorage;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };